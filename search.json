[{"path":[]},{"path":"https://rpodcast.github.io/shinystate/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://rpodcast.github.io/shinystate/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://rpodcast.github.io/shinystate/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://rpodcast.github.io/shinystate/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://rpodcast.github.io/shinystate/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement theRcast()gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://rpodcast.github.io/shinystate/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://rpodcast.github.io/shinystate/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://rpodcast.github.io/shinystate/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://rpodcast.github.io/shinystate/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://rpodcast.github.io/shinystate/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://rpodcast.github.io/shinystate/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://rpodcast.github.io/shinystate/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Information and Guidelines for Contributing to shinystate","title":"Information and Guidelines for Contributing to shinystate","text":"many ways contribute ongoing development shinystate package. contributions can rather easy (e.g., fixing typos, improving documentation, filing issues feature requests problems, etc.) whereas contributions can require time patience (like answering questions submitting pull requests code changes). Just know help provided capacity much appreciated! :)","code":""},{"path":"https://rpodcast.github.io/shinystate/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing Issues","title":"Information and Guidelines for Contributing to shinystate","text":"believe found bug, create minimal reprex posting shinystate issue tracker. Try include anything unnecessary, just minimal amount code constitutes reproducible bug. try verify bug running code reprex provided. quality reprex reduce amount back--forth communication trying understand execute code systems. realize creating reprex involving Shiny application can challenging. Hence highly recommended consult aforementioned Shiny debugging reprex guide valuable information. addition, recommend reprex utilizes local {pins} board (board_local() board_folder() utilizing default settings), board hosted cloud service board_databricks(), board_ms365(). board_azure(), board_gcs(), board_gdrive().","code":""},{"path":"https://rpodcast.github.io/shinystate/CONTRIBUTING.html","id":"making-pull-requests","dir":"","previous_headings":"Filing Issues","what":"Making Pull Requests","title":"Information and Guidelines for Contributing to shinystate","text":"consider making pull request (PR), please file issue first explain problem detail. PR enhancement, detail change make things better package users. Bugfix PRs also require explanation bug proposed fix remove bug. great way illustrate bug include reprex. upfront work prior preparing PR can time-consuming opens line communication package authors community, perhaps leading better enhancement effective fixes! consensus PR based issue helpful, adhering following process make things proceed quickly: Create fork shinystate repository. Create separate Git branch PR. shinystate package follows tidyverse style guide please adopt style guidelines submitted code best possible. internal documentation uses roxygen2; contribution requires new revised documentation ensure roxygen comments added/modified (modify .Rd files man folder). use testthat code coverage; contributions test cases included helpful easier accept.","code":""},{"path":"https://rpodcast.github.io/shinystate/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Eli Lilly Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rpodcast.github.io/shinystate/articles/shinystate.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"shinystate","text":"shinystate R package enables Shiny application developers customize key features bookmarkable state. bookmarkable state feature included shiny lets application user save state application (values inputs), state can either encoded custom URL saved objects hosting server. standard Shiny application small number input controls, built-bookmarkable state features likely suffice. However, handful limitations exist intermediate complex applications: Encoding large number input settings using URL method may reach surpass allowable length URL web browsers. Saving bookmarkable state server requires compatible hosting platform (Posit Connect Shiny Server Pro). Even hosting providers, bookmarkable state session files saved directories hosting server accessible system accounts, easily shared users. Shiny includes ability augment bookmarkable state callback functions discussed advanced bookmarking article, intended assist applications involving complex reactive structure alongside user inputs. surface, callbacks appear address different issues aforementioned limitations. inagural R/Pharma conference held 2018, Joe Cheng shared Shiny application demonstrating small enhancements managing multiple bookmarkable state sessions current user development context. shinystate package incorporates novel approaches offer Shiny developers intuitive framework address limitations: Integrate thepins package offer multiple storage locations save bookmarkable state files. Add optional metadata compliment existing bookmarkable state objects time snapshot created. Perform bookmarkable state operations using new R6 class called StorageClass.","code":""},{"path":"https://rpodcast.github.io/shinystate/articles/shinystate.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"shinystate","text":"shinystate package can installed CRAN:","code":"install.packages(\"shinystate\")"},{"path":"https://rpodcast.github.io/shinystate/articles/shinystate.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"shinystate","text":"enable saving bookmarkable state shinystate, need : Load package: library(shinystate) Create instance StorageClass class outside application user interface server functions: StorageClass$new() Include use_shinystate() UI definition Call register_metadata() method instance StorageClass class beginning application server function Enable save--server bookmarking method adding enableBookmarking = 'server' call shinyApp() Call snapshot() method instance StorageClass class save state Shiny app session Call restore() method instance StorageClass class restore saved session based session URL, available data frame returned get_sessions() method.","code":""},{"path":"https://rpodcast.github.io/shinystate/articles/shinystate.html","id":"example-application","dir":"Articles","previous_headings":"","what":"Example Application","title":"shinystate","text":"example application illustrating default usage shinystate. application small set user inputs well reactive value also saved part bookmarkable state session. pair action buttons trigger saving loading bookmarkable state within respective observeEvent expressions. application, recent bookmarkable state session restored obtaining last record’s URL value session data frame.","code":"library(shiny) library(bslib) library(shinystate)  storage <- StorageClass$new()  ui <- function(request) {   page_sidebar(     title = \"Basic App\",     sidebar = sidebar(       accordion(         open = c(\"user_inputs\", \"state\"),         accordion_panel(           id = \"user_inputs\",           \"User Inputs\",           textInput(             \"txt\",             label = \"Enter Title\",             placeholder = \"change this\"           ),           checkboxInput(\"caps\", \"Capitalize\"),           sliderInput(             \"bins\",             label = \"Number of bins\",             min = 1,             max = 50,             value = 30           ),           actionButton(\"add\", \"Add\")         ),         accordion_panel(           id = \"state\",           \"Bookmark State\",           actionButton(\"bookmark\", \"Bookmark\"),           actionButton(\"restore\", \"Restore Last Bookmark\")         )       )     ),     use_shinystate(),     card(       card_header(\"App Output\"),       plotOutput(\"distPlot\")     )   ) }  server <- function(input, output, session) {   storage$register_metadata()    vals <- reactiveValues(sum = 0)    plot_title <- reactive({     if (!shiny::isTruthy(input$txt)) {       value <- \"Default Title\"     } else {       value <- input$txt     }      if (input$caps) {       value <- toupper(value)     }      return(value)   })    onBookmark(function(state) {     state$values$currentSum <- vals$sum   })    onRestore(function(state) {     vals$sum <- state$values$currentSum   })    observeEvent(input$add, {     vals$sum <- vals$sum + input$n   })    output$distPlot <- renderPlot({     req(plot_title())     x <- faithful$waiting     bins <- seq(min(x), max(x), length.out = input$bins + 1)     hist(       x,       breaks = bins,       col = \"#007bc2\",       border = \"white\",       xlab = \"Waiting time to next eruption (in mins)\",       main = plot_title()     )   })    observeEvent(input$bookmark, {     storage$snapshot()     showNotification(\"Session successfully saved\")   })    observeEvent(input$restore, {     session_df <- storage$get_sessions()     storage$restore(tail(session_df$url, n = 1))   })    setBookmarkExclude(c(\"add\", \"bookmark\", \"restore\")) }  shinyApp(ui, server, enableBookmarking = \"server\")"},{"path":"https://rpodcast.github.io/shinystate/articles/shinystate.html","id":"try-it-out-in-shinylive","dir":"Articles","previous_headings":"Example Application","what":"Try it out in Shinylive","title":"shinystate","text":"Open Shinylive","code":""},{"path":"https://rpodcast.github.io/shinystate/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eric Nantz. Author, maintainer. Eli Lilly Company. Copyright holder, funder.","code":""},{"path":"https://rpodcast.github.io/shinystate/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nantz E (2025). shinystate: Customization 'Shiny' Bookmarkable State. R package version 0.0.0.9003, https://rpodcast.github.io/shinystate/.","code":"@Manual{,   title = {shinystate: Customization of 'Shiny' Bookmarkable State},   author = {Eric Nantz},   year = {2025},   note = {R package version 0.0.0.9003},   url = {https://rpodcast.github.io/shinystate/}, }"},{"path":"https://rpodcast.github.io/shinystate/index.html","id":"shinystate-","dir":"","previous_headings":"","what":"Customization of Shiny Bookmarkable State","title":"Customization of Shiny Bookmarkable State","text":"shinystate R package provides additional customization top standard Shiny bookmarkable state capabilities.","code":""},{"path":"https://rpodcast.github.io/shinystate/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Customization of Shiny Bookmarkable State","text":"","code":"# Install the released version from CRAN install.packages(\"shinystate\")  # Or the development version from GitHub: remotes::install_github(\"rpodcast/shinystate\")"},{"path":"https://rpodcast.github.io/shinystate/index.html","id":"why-shinystate","dir":"","previous_headings":"","what":"Why shinystate?","title":"Customization of Shiny Bookmarkable State","text":"Shiny application leverages bookmarkable state default feature set working use case, shinystate likely value-added. However, applications grow complexity used high-stakes situations, may wish application support following features: Flexible configuration bookmarkable state files stored, whether file system server running application, separate repository cloud storage. Allow users save multiple bookmarkable state sessions, tailored situations multiple “projects” inside application. Augment bookmarkable state artifacts metadata choosing. Possible metadata include custom names timestamps. shinystate package offers intuitive class system built upon R6 package methods tailored common operations managing bookmarkable state.","code":""},{"path":"https://rpodcast.github.io/shinystate/index.html","id":"how-to-use-it","dir":"","previous_headings":"","what":"How to use it?","title":"Customization of Shiny Bookmarkable State","text":"enable saving bookmarkable state shinystate, need : Load package: library(shinystate) Create instance StorageClass class outside application user interface server functions: StorageClass$new() Include use_shinystate() UI definition Call register_metadata() method instance StorageClass class beginning application server function Enable save--server bookmarking method adding enableBookmarking = 'server' call shinyApp() Call snapshot() method instance StorageClass class save state Shiny app session Call restore() method instance StorageClass class restore saved session based session URL, available data frame returned get_sessions() method. example application illustrating default usage shinystate. Visit Getting Started additional details.","code":"library(shiny) library(bslib) library(shinystate)  storage <- StorageClass$new()  ui <- function(request) {   page_sidebar(     title = \"Basic App\",     sidebar = sidebar(       accordion(         open = c(\"user_inputs\", \"state\"),         accordion_panel(           id = \"user_inputs\",           \"User Inputs\",           textInput(             \"txt\",             label = \"Enter Title\",             placeholder = \"change this\"           ),           checkboxInput(\"caps\", \"Capitalize\"),           sliderInput(             \"bins\",             label = \"Number of bins\",             min = 1,             max = 50,             value = 30           ),           actionButton(\"add\", \"Add\")         ),         accordion_panel(           id = \"state\",           \"Bookmark State\",           actionButton(\"bookmark\", \"Bookmark\"),           actionButton(\"restore\", \"Restore Last Bookmark\")         )       )     ),     use_shinystate(),     card(       card_header(\"App Output\"),       plotOutput(\"distPlot\")     )   ) }  server <- function(input, output, session) {   storage$register_metadata()    vals <- reactiveValues(sum = 0)    plot_title <- reactive({     if (!shiny::isTruthy(input$txt)) {       value <- \"Default Title\"     } else {       value <- input$txt     }      if (input$caps) {       value <- toupper(value)     }      return(value)   })    onBookmark(function(state) {     state$values$currentSum <- vals$sum   })    onRestore(function(state) {     vals$sum <- state$values$currentSum   })    observeEvent(input$add, {     vals$sum <- vals$sum + input$n   })    output$distPlot <- renderPlot({     req(plot_title())     x <- faithful$waiting     bins <- seq(min(x), max(x), length.out = input$bins + 1)     hist(       x,       breaks = bins,       col = \"#007bc2\",       border = \"white\",       xlab = \"Waiting time to next eruption (in mins)\",       main = plot_title()     )   })    observeEvent(input$bookmark, {     storage$snapshot()     showNotification(\"Session successfully saved\")   })    observeEvent(input$restore, {     session_df <- storage$get_sessions()     storage$restore(tail(session_df$url, n = 1))   })    setBookmarkExclude(c(\"add\", \"bookmark\", \"restore\")) }  shinyApp(ui, server, enableBookmarking = \"server\")"},{"path":"https://rpodcast.github.io/shinystate/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Customization of Shiny Bookmarkable State","text":"Please note shinystate project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":null,"dir":"Reference","previous_headings":"","what":"StorageClass R6 class — StorageClass","title":"StorageClass R6 class — StorageClass","text":"class provides set methods create manage Shiny bookmarkable state files.","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"StorageClass R6 class — StorageClass","text":"local_storage_dir file path use storing bookmarkable state files. specified, temporary directory host system used. board_sessions Optional pre-created board object created pins package. missing, folder-based pin board created using local_storage_dir path.","code":""},{"path":[]},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"StorageClass R6 class — StorageClass","text":"StorageClass$new() StorageClass$get_sessions() StorageClass$restore() StorageClass$snapshot() StorageClass$delete() StorageClass$register_metadata() StorageClass$clone()","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"StorageClass R6 class — StorageClass","text":"Initialize StorageClass object","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StorageClass R6 class — StorageClass","text":"","code":"StorageClass$new(local_storage_dir = NULL, board_sessions = NULL)"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StorageClass R6 class — StorageClass","text":"local_storage_dir file path use storing bookmarkable state files. specified, temporary directory host system used. board_sessions Optional pre-created board object created pins package. missing, folder-based pin board created using local_storage_dir path.","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"StorageClass R6 class — StorageClass","text":"object class StorageClass methods described documentation","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StorageClass R6 class — StorageClass","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  # Create a StorageClass object with default settings storage <- StorageClass$new()  # Use a local directory called \"sessions\" to store files storage <- StorageClass$new(local_storage_dir = \"sessions\")  # use a custom pins board to store bookmarkable state data library(pins) board <- board_folder(\"/path/to/storage_dir\") storage <- StorageClass$new(board_sessions = board) }"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"method-get-sessions-","dir":"Reference","previous_headings":"","what":"Method get_sessions()","title":"StorageClass R6 class — StorageClass","text":"Obtain saved bookmarkable state session metadata Calls $get_sessions() StorageClass object extract bookmarkable state session metadata. can leverage data frame Shiny application let user manage existing bookmarkable state sessions, example.","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"StorageClass R6 class — StorageClass","text":"","code":"StorageClass$get_sessions()"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"StorageClass R6 class — StorageClass","text":"data frame bookmarkable session metadata","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"StorageClass R6 class — StorageClass","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  storage <- StorageClass$new()  # application UI for displaying session data tableOutput(\"session_table\")  # server logic for displaying session data output$session_table <- renderTable({   storage$get_sessions() }) }"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"method-restore-","dir":"Reference","previous_headings":"","what":"Method restore()","title":"StorageClass R6 class — StorageClass","text":"Restore previous bookmarkable state session","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"StorageClass R6 class — StorageClass","text":"","code":"StorageClass$restore(url, session = shiny::getDefaultReactiveDomain())"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"StorageClass R6 class — StorageClass","text":"url character unique URL assigned bookmarkable state session. session Shiny session associate restore operation","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"StorageClass R6 class — StorageClass","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  # restoration of last-saved bookmarkable state file # # beginning of application storage <- StorageClass$new()  # application UI to trigger restore shiny::actionButton(\"restore\", \"Restore State\")  # server logic for restoring state observeEvent(input$restore, {   session_df <- storage$get_sessions()   storage$restore(tail(session_df$url, n = 1)) }) }"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"method-snapshot-","dir":"Reference","previous_headings":"","what":"Method snapshot()","title":"StorageClass R6 class — StorageClass","text":"Create snapshot bookmarkable state","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"StorageClass R6 class — StorageClass","text":"","code":"StorageClass$snapshot(   session_metadata = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"StorageClass R6 class — StorageClass","text":"session_metadata Optional named list additional variables include default bookmarkable state attributes creating snapshot. element list must single-length item session Shiny session associate snapshot operation","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"StorageClass R6 class — StorageClass","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  storage <- StorageClass$new()  # application UI to trigger save actionButton(\"save\", \"Save State\")  # server logic for restoring state with timestamp as metadata observeEvent(input$save, {   storage$snapshot(session_metadata = list(time = Sys.time())) }) }"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"method-delete-","dir":"Reference","previous_headings":"","what":"Method delete()","title":"StorageClass R6 class — StorageClass","text":"Delete previous snapshot bookmarkable state","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"StorageClass R6 class — StorageClass","text":"","code":"StorageClass$delete(url)"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"StorageClass R6 class — StorageClass","text":"url character unique URL assigned bookmarkable state session.","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"StorageClass R6 class — StorageClass","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  storage <- StorageClass$new()  # application UI to let user choose previous session uiOutput(\"previous_sessions_ui\")  # application UI to trigger delete shiny::actionButton(\"delete\", \"Delete Session\")  # server logic # populate dynamic UI output$previous_sessions_ui <- renderUI({   session_df <- storage$get_sessions   radioButtons(     \"session_choice\",     \"Choose Session\",     choices = session_df$url   ) })  # perform session deletion observeEvent(input$delete, {   req(input$session_choice)   storage$delete(input$session_choice) }) }"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"method-register-metadata-","dir":"Reference","previous_headings":"","what":"Method register_metadata()","title":"StorageClass R6 class — StorageClass","text":"Register bookmarkable state storage data collection method must called application server function perform necessary customizations bookmarkable state methods","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"StorageClass R6 class — StorageClass","text":"","code":"StorageClass$register_metadata()"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"StorageClass R6 class — StorageClass","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  storage <- StorageClass$new()  # applicaiton UI code ...  # application server code storage$register_metadata() }"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"StorageClass R6 class — StorageClass","text":"objects class cloneable method.","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"StorageClass R6 class — StorageClass","text":"","code":"StorageClass$clone(deep = FALSE)"},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"StorageClass R6 class — StorageClass","text":"deep Whether make deep clone.","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/StorageClass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StorageClass R6 class — StorageClass","text":"","code":"## ------------------------------------------------ ## Method `StorageClass$new` ## ------------------------------------------------  ## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  # Create a StorageClass object with default settings storage <- StorageClass$new()  # Use a local directory called \"sessions\" to store files storage <- StorageClass$new(local_storage_dir = \"sessions\")  # use a custom pins board to store bookmarkable state data library(pins) board <- board_folder(\"/path/to/storage_dir\") storage <- StorageClass$new(board_sessions = board) }  ## ------------------------------------------------ ## Method `StorageClass$get_sessions` ## ------------------------------------------------  ## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  storage <- StorageClass$new()  # application UI for displaying session data tableOutput(\"session_table\")  # server logic for displaying session data output$session_table <- renderTable({   storage$get_sessions() }) }  ## ------------------------------------------------ ## Method `StorageClass$restore` ## ------------------------------------------------  ## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  # restoration of last-saved bookmarkable state file # # beginning of application storage <- StorageClass$new()  # application UI to trigger restore shiny::actionButton(\"restore\", \"Restore State\")  # server logic for restoring state observeEvent(input$restore, {   session_df <- storage$get_sessions()   storage$restore(tail(session_df$url, n = 1)) }) }  ## ------------------------------------------------ ## Method `StorageClass$snapshot` ## ------------------------------------------------  ## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  storage <- StorageClass$new()  # application UI to trigger save actionButton(\"save\", \"Save State\")  # server logic for restoring state with timestamp as metadata observeEvent(input$save, {   storage$snapshot(session_metadata = list(time = Sys.time())) }) }  ## ------------------------------------------------ ## Method `StorageClass$delete` ## ------------------------------------------------  ## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  storage <- StorageClass$new()  # application UI to let user choose previous session uiOutput(\"previous_sessions_ui\")  # application UI to trigger delete shiny::actionButton(\"delete\", \"Delete Session\")  # server logic # populate dynamic UI output$previous_sessions_ui <- renderUI({   session_df <- storage$get_sessions   radioButtons(     \"session_choice\",     \"Choose Session\",     choices = session_df$url   ) })  # perform session deletion observeEvent(input$delete, {   req(input$session_choice)   storage$delete(input$session_choice) }) }  ## ------------------------------------------------ ## Method `StorageClass$register_metadata` ## ------------------------------------------------  ## Only run examples in interactive R sessions if (interactive()) {  # beginning of application library(shiny) library(shinystate)  storage <- StorageClass$new()  # applicaiton UI code ...  # application server code storage$register_metadata() }"},{"path":"https://rpodcast.github.io/shinystate/reference/use_shinystate.html","id":null,"dir":"Reference","previous_headings":"","what":"Add shinystate dependency — use_shinystate","title":"Add shinystate dependency — use_shinystate","text":"Include shinystate dependencies Shiny application UI","code":""},{"path":"https://rpodcast.github.io/shinystate/reference/use_shinystate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add shinystate dependency — use_shinystate","text":"","code":"use_shinystate()"},{"path":"https://rpodcast.github.io/shinystate/reference/use_shinystate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add shinystate dependency — use_shinystate","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  library(shiny) library(shinystate)  storage <- StorageClass$new()  ui <- function(request) {   fluidPage(     use_shinystate(),     actionButton(\"bookmark\", \"Bookmark\"),     actionButton(\"restore\", \"Restore Last Bookmark\")   ) } }"},{"path":"https://rpodcast.github.io/shinystate/news/index.html","id":"shinystate-development-version","dir":"Changelog","previous_headings":"","what":"shinystate (development version)","title":"shinystate (development version)","text":"Fix typo test session ID extraction Clean basic app example leverage bslib user interface Streamline example application utilizing R6 classes, along new feature save restore state R6 object. Remove dependency dplyr using base R operations filter bind rows session data frames.","code":""},{"path":"https://rpodcast.github.io/shinystate/news/index.html","id":"shinystate-0009000","dir":"Changelog","previous_headings":"","what":"shinystate 0.0.0.9000","title":"shinystate 0.0.0.9000","text":"Create initial version R6 class StorageClass Add example Shiny applications utilizing package","code":""}]
